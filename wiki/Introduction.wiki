=Introduction to MascotDatfile=

This library was developed as a tool for the large scale analysis of all data inside one or more complex Mascot() MS/MS datfiles for a variety of purposes.
The main functionality consists of retrieving a Mascot datfile from multiple sources (a harddisk, database or MascotServer URL ) and transforming into a functional object model.
A MascotDatfile instance captures all the data from PeptideHits and Queries into easy accessible objects. Standard methods are integrated into the objects to analyse small details like:

  * threshold calculation of an MS/MS spectrum versus ionscore of a peptide identification
  * sequence coverage of a peptide identification in a MS/MS spectrum
  * processing of modified aminoacid residues on peptide identifications
  * processing of MS/MS spectra
  * etc ..

*In summary, this library makes the raw data inside Mascot datfiles easily accessible for research purposes.*

The library is written by Kenny Helsens ([kenny.helsens@UGent.be] and you can contact the author for any questions concerning this library. Also feel free to contact me whenever you have suggestions/enhancements/comments to library.


== example code ==

{{{

package com.compomics.mascotdatfile.research.script;

import com.compomics.mascotdatfile.util.interfaces.MascotDatfileInf;
import com.compomics.mascotdatfile.util.interfaces.QueryToPeptideMapInf;
import com.compomics.mascotdatfile.util.mascot.PeptideHit;
import com.compomics.mascotdatfile.util.mascot.ProteinHit;
import com.compomics.mascotdatfile.util.mascot.ProteinID;
import com.compomics.mascotdatfile.util.mascot.Query;
import com.compomics.mascotdatfile.util.mascot.enumeration.MascotDatfileType;
import com.compomics.mascotdatfile.util.mascot.factory.MascotDatfileFactory;
import org.apache.log4j.Logger;

import java.io.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Vector;

/**
 * This class is a
 */
public class ExampleWiki1 {
    public ExampleWiki1() {
        try {

            File input = new File("/home/myfolder/F011830.dat");

            // Define the separator
            char iSeparator = ';';

            // Ready to go!
            MascotDatfileInf iMascotDatfile = null;

            // log the status.
            System.out.println("Processing " + input.getName());

            // Create a new MascotDatfile instance for each filename in the Input array.
            iMascotDatfile = MascotDatfileFactory.create(input[i], MascotDatfileType.MEMORY);

            // Fetch the QueryToPeptideMap. This indexes all queries.
            // From 1 to n number of spectra in the corresponding datfile.

            QueryToPeptideMapInf lQueryToPeptideMap = iMascotDatfile.getQueryToPeptideMap();
            // Also explore other methods on the QueryToPeptideMap!!!

            ArrayList list = null;

            // This Vector retrieves the best PeptideHit for each Query.
            // The Vector is zero based.
            // ex: Vector[0] contains the peptidehit of Query 1, etc.
            Vector lBestPeptideHits = lQueryToPeptideMap.getAllPeptideHitsAboveIdentityThreshold();

            // A - Iterate over all ProteinIDs
            Iterator iter = iMascotDatfile.getProteinMap().getProteinIDIterator();
            ProteinID lProteinID = null;
            while (iter.hasNext()) {
                String item = "";

                String lAccession = iter.next().toString();
                lProteinID = iMascotDatfile.getProteinMap().getProteinID(lAccession);

                // Collect information for current protein.
                item = "PROTEIN" + iSeparator
                        + lAccession + iSeparator
                        + lProteinID.getQueryNumbers().length + iSeparator
                        + lProteinID.getDescription();

                // Print to system outputstream
                System.out.println(item);
            }

            // B - Iterate over all PeptideHits.
            for (int j = 0; j < lBestPeptideHits.size(); j++) {
                PeptideHit lPeptideHit = (PeptideHit) lBestPeptideHits.elementAt(j);
                // CSV output array.

                if (lPeptideHit != null) {
                    // 1. MS/MS Spectrum filename.
                    // 2. Modified PeptideSequence
                    // 3. IonScore
                    // 4. 95% Identity Threshold
                    // 5. Number of ProteinHits
                    // 6a. Protein i accession
                    // 6b. Protein i description
                    // etc. for n proteins.

                    // As a Peptide can come from multiple proteins, it can have multiple proteinhits.
                    ArrayList lProteins = lPeptideHit.getProteinHits();

                    for (int k = 0; k < lProteins.size(); k++) {
                        list = new ArrayList();

                        ProteinHit lProteinHit = (ProteinHit) lProteins.get(k);
                        String lAccession = lProteinHit.getAccession();
                        // The protein description come from another part of the Mascot Result file.
                        // The ProteinMap also keeps track how many peptides refer to a Protein, mind that protein inference is not regarded at all!
                        // 6a.
                        list.add(lAccession);
                        list.add("PEPTIDE");

                        // 1.
                        list.add(((Query) iMascotDatfile.getQueryList().get(j)).getFilename());
                        // 2.
                        list.add(lPeptideHit.getModifiedSequence());
                        // 3.
                        list.add(lPeptideHit.getIonsScore());
                        // 4.
                        list.add(lPeptideHit.calculateIdentityThreshold(0.05));

                        String lResult = "";
                        for (Object item : list) {
                            lResult = lResult + (String) item + iSeparator;
                        }

                        System.out.println(lResult);

                    }
                }
            }
            iMascotDatfile.finish();

        } catch (IOException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
    }
}


}}}